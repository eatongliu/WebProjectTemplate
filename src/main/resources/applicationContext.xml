<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns="http://www.springframework.org/schema/beans"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop.xsd
           http://www.springframework.org/schema/tx
           http://www.springframework.org/schema/tx/spring-tx.xsd
           http://www.springframework.org/schema/cache
           http://www.springframework.org/schema/cache/spring-cache.xsd
           http://www.springframework.org/schema/task
           http://www.springframework.org/schema/task/spring-task.xsd">


    <!-- 1.加载数据库配置的属性文件 -->
    <context:property-placeholder location="classpath:config.properties"/>

    <!-- 2.自动组件扫描 -->
    <context:component-scan base-package="com.gpdata.template">
        <context:exclude-filter type="annotation"
                                expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <aop:aspectj-autoproxy/>

    <bean class="com.gpdata.template.utils.ApplicationContextUtil" factory-method="getInstance"/>

    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver"
          p:defaultEncoding="utf-8"
          p:maxUploadSize="104857600"
          p:maxInMemorySize="4096"/>

    <!-- RedisCacheFactory 返回的　redisCache  -->
    <bean id="redisCache" class="com.gpdata.template.base.cache.CacheFactory"
          factory-method="getInstances"/>


    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">

        <!---->
        <property name="driverClass" value="${project.jdbc.driverClassName}"/>
        <property name="jdbcUrl" value="${project.jdbc.url}"/>
        <property name="user" value="${project.jdbc.username}"/>
        <property name="password" value="${project.jdbc.password}"/>


        <property name="initialPoolSize" value="1"/>
        <property name="acquireIncrement" value="10"/>
        <property name="minPoolSize" value="50"/>
        <property name="maxPoolSize" value="200"/>
        <property name="maxIdleTime" value="600"/>
        <property name="maxStatements" value="8"/>
        <property name="maxStatementsPerConnection" value="5"/>
    </bean>

    <!-- Hibernate SessionFactory -->
    <!--
    <property name="configLocation" value="classpath:hibernate.cfg.xml"/>
    -->
    <bean id="sessionFactory"
          class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">

        <property name="dataSource" ref="dataSource"/>


        <property name="hibernateProperties">
            <props>
                <!--<prop key="hibernate.dialect">org.hibernate.dialect.MySQLInnoDBDialect</prop>-->
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5InnoDBDialect</prop>
                <prop key="hibernate.connection.driver_class">${project.jdbc.driverClassName}</prop>
                <prop key="hibernate.connection.url">${project.jdbc.url}</prop>
                <prop key="hibernate.connection.username">${project.jdbc.username}</prop>
                <prop key="hibernate.connection.password">${project.jdbc.password}</prop>

                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.format_sql">true</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>

                <prop key="hibernate.connection.autoReconnect">true</prop>
                <prop key="hibernate.connection.failOverReadOnly">false</prop>
                <prop key="hibernate.connection.useUnicode">true</prop>
                <prop key="hibernate.connection.characterEncoding">UTF-8</prop>

                <prop key="hibernate.connection.provider_class">
                    org.hibernate.c3p0.internal.C3P0ConnectionProvider
                </prop>

                <prop key="hibernate.transaction.coordinator_class">
                    jdbc
                </prop>
                <prop key="hibernate.current_session_context_class">
                    org.springframework.orm.hibernate4.SpringSessionContext
                </prop>
                <prop key="hibernate.transaction.factory_class">
                    org.hibernate.engine.transaction.internal.jdbc.JdbcTransactionFactory
                </prop>
                <prop key="hibernate.cache.use_second_level_cache">true</prop>
                <prop key="hibernate.cache.provider_configuration_file_resource_path">
                    ehcache.xml
                </prop>
                <prop key="hibernate.cache.use_query_cache">false</prop>
                <prop key="hibernate.cache.region.factory_class">
                    org.hibernate.cache.SingletonEhCacheRegionFactory
                </prop>
                <prop key="hibernate.cache.use_structured_entries">false</prop>
                <prop key="hibernate.generate_statistics">false</prop>
                <prop key="hibernate.use_sql_comments">false</prop>
                <prop key="hibernate.jdbc.batch_size">30</prop>
                <prop key="hibernate.connection.autocommit">false</prop>

                <prop key="hibernate.bytecode.provider">javassist</prop>
                <prop key="hibernate.max_fetch_depth">3</prop>
            </props>
        </property>

        <!--pojo实体类-->
        <property name="packagesToScan">
            <list>
                <!--<value>com.gpdata.template.ft.entity</value>-->
                <!--<value>com.gpdata.template.md.entity</value>-->
                <!--<value>com.gpdata.template.sv.entity</value>-->
            </list>
        </property>
    </bean>

    <!-- 配置事务 -->
    <bean id="transactionManager"
          class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <constructor-arg ref="sessionFactory"/>
        <property name="nestedTransactionAllowed" value="true"/>
        <!--<property name="dataSource" ref="dataSource" />  -->
    </bean>

    <!-- REQUIRED SUPPORTS -->
    <!-- -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="delete*" propagation="REQUIRED"/>
            <tx:method name="merge*" propagation="REQUIRED"/>
            <tx:method name="generate*" propagation="REQUIRED"/>
            <tx:method name="*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>


    <aop:config>
        <aop:pointcut id="servicePointcut"
                      expression="execution(* com.gpdata.template..service.*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="servicePointcut"/>
    </aop:config>

    <!-- 用户检查过滤器 -->
    <!-- constructor-arg 传递的是要过滤的正则表达式  -->
    <bean id="userAuthorizationFilter" class="com.gpdata.template.base.filter.UserAuthorizationFilter">
        <constructor-arg name="includePrefix">
            <set>
                <value>^/test/</value>
                <value>^/stores/</value>
                <value>^/users/</value>
                <value>^/order/</value>
                <value>^/pay/</value>
                <value>^/\d+\.\d+/test/</value>
            </set>
        </constructor-arg>
        <constructor-arg name="excludePrefix">
            <set>
                <value>^/pay/alipay/charging/notify_url\??</value>
                <value>^/pay/alipay/report/notify_url\??</value>
                <value>^/pay/alipay/api/notify_url\??</value>
            </set>
        </constructor-arg>
        <property name="ticketTokenHandler" ref="ticketTokenHandler"/>
        <!-- 登录路径 -->
        <property name="loginUrl" value="/user-log-in"/>
        <!-- 授权失败跳转路径 -->
        <property name="unauthorizedUrl" value="/user-log-in"/>
    </bean>

    <!-- 票据加密 -->
    <bean id="ticketTokenHandler" class="com.gpdata.template.base.core.TicketTokenHandler">
        <property name="cookieName" value="${ticketTokenHandler.cookieName}"/>
        <property name="expireTimeSecond" value="${ticketTokenHandler.expireTimeSecond}"/>
        <property name="secretKey" value="${ticketTokenHandler.secretKey}"/>
    </bean>

    <!-- 用户行为记录过滤器 -->
    <!-- constructor-arg 传递的是不过滤的正则表达式  -->
    <bean id="userTraceFilter" class="com.gpdata.template.base.filter.UserTraceFilter">
        <constructor-arg>
            <set>
                <value>^/api$</value>
                <value>^/admin$</value>
                <value>^/fileser$</value>
                <value>^/css/</value>
                <value>^/file/</value>
                <value>^/fonts/</value>
                <value>^/images/</value>
                <value>^/js/</value>
                <value>^/oldfile/</value>
                <value>^/pictures/</value>
                <value>^/upload/</value>
                <value>^/file/</value>
            </set>
        </constructor-arg>
        <property name="webIdName" value="_gp_rdsid"/>
        <property name="expireTimeSecond" value="31536000"/>
    </bean>

    <!-- 导入权限管理的配置 -->
    <import resource="applicationContext-shiro.xml"/>


    <!-- 定时任务  "0 0 3 * * ?" 每天上午3点触发 ，进行表结构更新 秒（0~59）
        分钟（0~59）
        小时（0~23）
        天（月）（0~31，但是你需要考虑你月的天数）
        月（0~11）
        天（星期）（1~7 1=SUN 或 SUN，MON，TUE，WED，THU，FRI，SAT）
        年份（1970－2099）
        -->
    <!-- 定时任务 -->
    <!-- 每2个小时，进行数据更新
    <task:scheduled-tasks>
        <task:scheduled ref="dataSourceTableTask" method="getData" cron="0 0 */2 * * ?"/>
    </task:scheduled-tasks>
-->
    <!-- 定时任务 -->
    <!-- 每1个小时，进行表结构更新
    <task:scheduled-tasks>
        <task:scheduled ref="dataSourceTableTask" method="updateAllDataResource" cron="0 0 */1 * * ?"/>
    </task:scheduled-tasks>
    -->

    <!-- 应用性能检查过滤器 -->
    <bean id="performanceFilter" class="com.gpdata.template.base.filter.PerformanceFilter">
    </bean>

    <!-- 获取 spring 容器的工具 -->
    <bean class="com.gpdata.template.base.common.utils.SpringApplicationContextUtil" factory-method="getInstance"/>

    <!-- 保存上传的文件的工具 -->
    <bean id="flexibleFileUtil" class="${project.class.flexibleFileUtil}"/>

    <!-- 导入权限管理的配置 -->
    <import resource="applicationContext-shiro.xml"/>
</beans>
